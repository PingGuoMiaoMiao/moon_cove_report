// Generated using `moon info`, DON'T EDIT IT
package "moonbit-community/mooncove/lib"

// Values

// Errors

// Types and methods
type CoveragePoint
type FileCoverage
type CoverageData
type LineCoverage
type FileCoverage
type LineMapEntry
fn build_line_map(source : String) -> @list.List[LineMapEntry]
fn map_to_line_view(
  data : CoverageData,
  source_files : Map[String, String],
) -> @list.List[FileCoverageView]
fn merge_coverage(a: CoverageData, b: CoverageData) -> CoverageData
fn merge_file_coverage(a: FileCoverage, b: FileCoverage) -> Result[FileCoverage, String]
fn parse_bisect(input: String) -> Result[CoverageData, String]
fn get_point_execution(data: CoverageData, file: String, start: Int, end: Int) -> Option[Int]
fn get_file_points(data: CoverageData, file: String) -> @list.List[CoveragePoint]
fn get_file_coverage(data: CoverageData, file: String) -> Option[Double]
fn get_overall_coverage(data: CoverageData) -> Double
fn generate_html_report(views: @list.List[FileCoverageView], overall_coverage: Double) -> String
fn calculate_view_coverage(view: FileCoverageView) -> Double 
fn serialize_bisect(data: CoverageData) -> String
fn read_coverage_file(path: String) -> Result[CoverageData, String]
fn load_source_files(data: CoverageData, source_dir: String) -> Map[String, String]
fn save_report(report_html: String, output_path: String) -> Result[Unit, String]
fn ensure_output_dir_exists(output_path: String) -> Result[Unit, String]
// Type aliases

// Traits